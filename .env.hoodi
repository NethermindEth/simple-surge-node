############################### DEFAULT #####################################
ENABLE_TAIKO_CLIENT_METRICS=true

CHAINSPEC_PATH_ON_HOST=./static/testnet/chainspec.json

# L1
L1_CHAINID=560048

L1_ENDPOINT_HTTP= # Please prepare your own rpc endpoint
L1_ENDPOINT_WS= # Please prepare your own web socket endpoint
L1_BEACON_HTTP= # Please prepare your own beacon rpc endpoint

## Bridge related
BRIDGE=0x3c64138fccfC74eF57f623b4878d6884Ea06fF9c
ERC20_VAULT=0xd8F6E0e8964cfae12c5A308ea0bE0f6DbE0a93fb
ERC721_VAULT=0x6A5efD5EeE9b1acf627e298caE29eb5746127103
ERC1155_VAULT=0x36452767121CF3179e19Ab40736C82d07B42C8b2
SIGNAL_SERVICE=0x52E2fd16410C2D7Da64fd0B37D04c8cBf4B41537

## Timelock related
L1_OWNER=0x59648183321e4F3e99526dc2F5dD8B9648B95631
SURGE_TIMELOCK_CONTROLLER=0x59648183321e4F3e99526dc2F5dD8B9648B95631

## SGX prover related
AUTOMATA_DCAP_ATTESTATION_GETH=0x718e4aFf3b93B28ebcb1E529bC46C1b8a9757D81
AUTOMATA_DCAP_ATTESTATION_RETH=0xfd43de69E4dde40136354a642A513374B329FE3E
PEM_CERT_CHAIN_LIB=0xe81C9e253762AD02A54aA86C1BfEe817d759829b
SGX_GETH_VERIFIER=0xd9fd6a7694C93d5Db47f1802F629362F1E2129d4
SGX_RETH_VERIFIER=0x5A237047C090e086FD6eF3447e81086b42456DB8

## SP1 prover related
SP1_RETH_VERIFIER=0x56e229501eBAA5C288982dB34590f4D8547D019A
SUCCINCT_VERIFIER=0x05885c04B9BB6bFad79c68BE162a227C6657CFA7

## RISC0 prover related
RISC0_RETH_VERIFIER=0x7D99Bf0d506352F7C84e5F0411a18c8d3dB397C8
RISC0_GROTH16_VERIFIER=0x71e59c058d0B84C66C2878fE61b14280AC4f1F35

## L2 stack related
TAIKO_INBOX=0x624ec8F33DA83707f360D6d25136AA0741713BC4
TAIKO_WRAPPER=0x09C2046d78D11a930f9CCD839B715CD90653456d
FORCED_INCLUSION_STORE=0x38331DD1B7e55292115477D66dED677AD26C9126
SURGE_PROPOSER_WRAPPER=0x9362B23D14C0B1e8526d8E4a25c2bA44eff9B550

## Others
PROOF_VERIFIER=0xBaCC2d84F9C32358EDA855257F3658fAeFA9950B
SIG_VERIFY_LIB=0x3b433d808DEf0de3D0E5f5bAf70e84BC9388f0c4
SHARED_RESOLVER=0x984E537884d1C1f205Ce240Fea4929ef6787eEE1

# L2
L2_CHAINID=763375
L2_GENESIS_HASH=0xf2a617aaf5d55cc0032081d9c67b6a03b785d063ab48f5d69b5f6013930bb200

L2_BRIDGE=0x7633750000000000000000000000000000000001
L2_ERC20_VAULT=0x7633750000000000000000000000000000000002
L2_ERC721_VAULT=0x7633750000000000000000000000000000000003
L2_ERC1155_VAULT=0x7633750000000000000000000000000000000004
L2_SIGNAL_SERVICE=0x7633750000000000000000000000000000000005
TAIKO_ANCHOR=0x7633750000000000000000000000000000010001

L2_ENDPOINT_HTTP=http://host.docker.internal:8547
L2_ENDPOINT_WS=ws://host.docker.internal:8548
L2_AUTH_HTTP=http://host.docker.internal:8552

# Nethermind log level
NETHERMIND_LOG_LEVEL=debug

# Exposed ports
L2_METRICS_PORT=8018
L2_HTTP_PORT=8547
L2_WS_PORT=8548
L2_ENGINE_API_PORT=8552
L2_NETWORK_DISCOVERY_PORT=30313
POSTGRES_PORT=5432
VERIFIER_PORT=8050
BLOCKSCOUT_PORT=4000
BLOCKSCOUT_API_HOST=localhost
BLOCKSCOUT_L2_HOST=l2-nethermind-execution-client
BLOCKSCOUT_FRONTEND_PORT=3000
PROMETHEUS_PORT=9091
GRAFANA_PORT=3001

############################### REQUIRED #####################################
# Profitability check
CHECK_PROFITABILITY=true

# Allow empty blocks
ALLOW_EMPTY_BLOCKS=false

############################### TAIKO CLIENT #####################################
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=true
# A L1 account private key (with a balance of TTKOh deposited on TaikoL1) which will be used to sign the bond for proving the block.
# WARNING: only use a test account, pasting your private key in plain text here is not secure.
L1_PROVER_PRIVATE_KEY= # Request the key from @nmjustinchan or fund your own EOA
# SGX Raiko service endpoint, required if not running a guardian prover.
SGX_RAIKO_HOST=
# The size of batch sgx proofs. If set to 1, submits proof upon assignment, if x>1, submits a batch of proofs when x number of blocks are assigned.
# Setting this value to a number greater than 1 means you are enabling the proof aggregation functionality, please consult our documentation to understand the risks before doing so.
SGX_BATCH_SIZE=1
# ZKVM Raiko service endpoint.
RAIKO_HOST_ZKVM=
# The size of batch zkvm proofs. If set to 1, submits proof upon assignment, if x>1, submits a batch of proofs when x number of blocks are assigned.
# Setting this value to a number greater than 1 means you are enabling the proof aggregation functionality, please consult our documentation to understand the risks before doing so.
ZKVM_BATCH_SIZE=1
# Timeout in minutes for raiko request
RAIKO_REQUEST_TIMEOUT=60s
# Time interval to prove blocks, even if the number of pending proofs does not exceed the batchSize, this flag only works when the proof aggregation is enabled.
# We recommend that this value is set no greater than 45min, default is 30min. Ex: 30m0s
FORCE_BATCH_PROVING_INTERVAL=
# If set, prover will start proving batches from the batch with this ID
STARTING_BATCH_ID=
# Comma separated list of local proposer addresses, if set, prover will prove the batches proposed by these addresses before the assignment expiration time
LOCAL_PROPOSER_ADDRESSES=
# Confirmations to the latest L1 block before submitting a proof for a L2 block
BLOCK_CONFIRMATIONS=
# Whether to prove unassigned blocks or not (blocks that have expired their proof window
# without the original prover submitting a proof.).
PROVE_UNASSIGNED_BLOCKS=false
# Time interval to poll proofs from raiko host.
PROOF_POLLING_INTERVAL=

# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to Taiko L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`.
ENABLE_PROPOSER=true
# A L1 account (with balance) private key who will send TaikoL1.proposeBlock transactions.
L1_PROPOSER_PRIVATE_KEY= # Request the key from @nmjustinchan or fund your own EOA
# Address of the proposed block's suggested L2 fee recipient.
L2_SUGGESTED_FEE_RECIPIENT=0x3bc256069FF9af461F3e04494A3ece3f62F183fC
# Comma-delineated list (no spaces) of prover endpoints proposer should query when attempting to propose a block
# If you keep this default value you must also enable a prover by setting ENABLE_PROVER=false
# Whether to send EIP-4844 blob transactions when proposing blocks.
L1_BLOB_ALLOWED=true
# Comma-delimited local tx pool addresses you want to prioritize, useful to set your proposer to only propose blocks with your prover's transactions.
TXPOOL_LOCALS=
# If set to true, the proposer will use calldata as DA when the blob fee is more expensive than using calldata.
L1_FALLBACK_TO_CALLDATA=
# If set to true, enable revert protection. When you are not the first taiko proposer in current L1 block, you would revert.
# This function must be supported by your PBS provider to be effective.
L1_REVERT_PROTECTION=
# Minimum tip (in GWei) for a transaction to propose.
EPOCH_MIN_TIP=
# Time interval to propose L2 pending transactions
EPOCH_INTERVAL=5s
# Minimum time interval to force proposing a block, even if there are no transaction in mempool
EPOCH_MIN_PROPOSING_INTERVAL=
# If set, after this many epochs, proposer will be allowed to propose zero tip transactions once
EPOCH_ALLOW_ZERO_TIP_INTERVAL=
# Maximum number of transaction lists which will be proposed inside one proposing epoch
TX_POOL_MAX_TX_LISTS_PER_EPOCH=6
# ProverSet Address: We highly recommend you consult the deploy a proverset guide and use separate EOAs for prover and proposer to prevent nonce issues.
PROVER_SET=

# Transaction Manager Flags (Leave blank if using default values.) These only affect Prover and Proposer.

# The multiplier applied to fee suggestions to put a hard limit on fee increases
TX_FEE_LIMIT_MULTIPLIER=
# The minimum threshold (in GWei) at which fee bumping starts to be capped. Allows arbitrary fee bumps below this threshold.
TX_FEE_LIMIT_THRESHOLD=
# Gas limit will be used for transactions (0 means using gas estimation)
TX_GAS_LIMIT=1000000
# Enforces a minimum base fee (in GWei) to assume when determining tx fees. 1 GWei by default
TX_MIN_BASE_FEE=
# Enforces a minimum tip cap (in GWei) to use when determining tx fees. 1 GWei by default.
TX_MIN_TIP_CAP=
# Timeout for aborting a tx send if the tx does not make it to the mempool.
TX_NOT_IN_MEMPOOL_TIMEOUT=30s
# Number of confirmations which we will wait after sending a transaction
TX_NUM_CONFIRMATIONS=
# Frequency to poll for receipts
TX_RECEIPT_QUERY_INTERVAL=
# Duration we will wait before resubmitting a transaction to L1
TX_RESUBMISSION_TIMEOUT=10s
# Number of ErrNonceTooLow observations required to give up on a tx at a particular nonce without receiving confirmation
TX_SAFE_ABORT_NONCE_TOO_LOW_COUNT=
# Timeout for sending transactions. If 0 it is disabled.
TX_SEND_TIMEOUT=

############################### RELAYER #####################################
MYSQL_USER=admin
MYSQL_PASSWORD=admin
MYSQL_DATABASE=relayer
MYSQL_HOST=localhost:3306
MYSQL_MAX_IDLE_CONNS=50
MYSQL_MAX_OPEN_CONNS=3000
MYSQL_CONN_MAX_LIFETIME=100000
RABBITMQ_USER=root
RABBITMQ_PASSWORD=root
RABBITMQ_PORT=5672
CONFIRMATIONS_BEFORE_PROCESSING=1
NUM_GOROUTINES=100
BLOCK_BATCH_SIZE=10
QUEUE_PREFETCH=100
HEADER_SYNC_INTERVAL_IN_SECONDS=60
PROCESSOR_PRIVATE_KEY= # Request the key from @nmjustinchan or fund your own EOA
PROCESSING_FEE_MULTIPLIER=1.75
PROFITABLE_ONLY=false
TX_MIN_TIP_CAP=1.0
