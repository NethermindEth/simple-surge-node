############################### DEFAULT #####################################
ENABLE_TAIKO_CLIENT_METRICS=true

CHAINSPEC_PATH_ON_HOST=./static/devnet/chainspec.json

# L1
L1_CHAINID=3151908

L1_ENDPOINT_HTTP=http://host.docker.internal:32003
L1_ENDPOINT_WS=ws://host.docker.internal:32004
L1_BEACON_HTTP=http://host.docker.internal:33001

# L2
L2_CHAINID=763374
L2_GENESIS_HASH=0x57b0ac6ee10254955f8d5046893b07f42c397386a12ceb2ad5de302969a13cdf

L2_BRIDGE=0x7633740000000000000000000000000000000001
L2_ERC20_VAULT=0x7633740000000000000000000000000000000002
L2_ERC721_VAULT=0x7633740000000000000000000000000000000003
L2_ERC1155_VAULT=0x7633740000000000000000000000000000000004
L2_SIGNAL_SERVICE=0x7633740000000000000000000000000000000005
TAIKO_ANCHOR=0x7633740000000000000000000000000000010001

L2_ENDPOINT_HTTP=http://host.docker.internal:8547
L2_ENDPOINT_WS=ws://host.docker.internal:8548
L2_AUTH_HTTP=http://host.docker.internal:8552

# Nethermind log level
NETHERMIND_LOG_LEVEL=debug

# Surge
SURGE_PROPOSING_BLOCK_GAS=
SURGE_PROVING_BLOCK_GAS=
SURGE_OFF_CHAIN_COSTS=
SURGE_PRICE_FLUCTUATION_MODIFIER=

# Exposed ports
L2_METRICS_PORT=8018
L2_HTTP_PORT=8547
L2_WS_PORT=8548
L2_ENGINE_API_PORT=8552
L2_NETWORK_DISCOVERY_PORT=30313
POSTGRES_PORT=5432
VERIFIER_PORT=8050
BLOCKSCOUT_PORT=4000
BLOCKSCOUT_API_HOST=localhost
BLOCKSCOUT_FRONTEND_PORT=3000
PROMETHEUS_PORT=9091
GRAFANA_PORT=3001

############################### REQUIRED #####################################
# Owner private key for contract deployments
PRIVATE_KEY=0x94eb3102993b41ec55c241060f47daa0f6372e2e3ad7e91612ae36c364042e44

# Profitability check
CHECK_PROFITABILITY=true

# Allow empty blocks
ALLOW_EMPTY_BLOCKS=false

############################### PROTOCOL #####################################
# Log level of contract deployments
LOG_LEVEL="-vv"
# Block gas limit of contract deployments
BLOCK_GAS_LIMIT=200000000
# Owner and Executor Configuration
OWNER_MULTISIG=0x60997970C51812dc3A010C7d01b50e0d17dc79C8
OWNER_MULTISIG_SIGNERS=0x7633740000000000000000000000000000000002,0x7633740000000000000000000000000000000003,0x7633740000000000000000000000000000000004
TIMELOCK_PERIOD=86400
# DAO Configuration
DAO=0x7633740000000000000000000000000000000001
# Liveness Configuration
MAX_VERIFICATION_DELAY=100
MIN_VERIFICATION_STREAK=10
LIVENESS_BOND_BASE=100000000000000000
LIVENESS_BOND_PER_BLOCK=100000000000000000
# Preconf Configuration
INCLUSION_WINDOW=24
INCLUSION_FEE_IN_GWEI=100
FALLBACK_PRECONF=0x7633740000000000000000000000000000000001
# SGX Verifier Configuration
FMSPC=00906ED50000
TCB_LINK="https://api.trustedservices.intel.com/sgx/certification/v3/tcb?fmspc=${FMSPC}"
QE_IDENTITY_LINK="https://api.trustedservices.intel.com/sgx/certification/v3/qe/identity"
QEID_PATH="/test/sgx-assets/qe_identity.json"
TCB_INFO_PATH="/test/sgx-assets/tcb_info.json"

############################### OPTIONAL #####################################
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=true
# SGX Raiko service endpoint, required if not running a guardian prover.
SGX_RAIKO_HOST=
# ZKVM Raiko service endpoint.
RAIKO_HOST_ZKVM=
# Timeout in minutes for raiko request
RAIKO_REQUEST_TIMEOUT=60s
# If set, prover will start proving batches from the batch with this ID
STARTING_BATCH_ID=
# ZKVM Raiko service configs
RAIKO_SP1_RECURSION="plonk"
RAIKO_SP1_PROVER="local"
RAIKO_RISC0_BONSAI=false
RAIKO_RISC0_SNARK=true
RAIKO_RISC0_PROFILE=false
RAIKO_RISC0_EXECUTION_PO2=20
# A L1 account private key (with a balance of TTKOh deposited on TaikoL1) which will be used to sign the bond for proving the block.
# WARNING: only use a test account, pasting your private key in plain text here is not secure.
L1_PROVER_PRIVATE_KEY=0x94eb3102993b41ec55c241060f47daa0f6372e2e3ad7e91612ae36c364042e44
# Whether to prove unassigned blocks or not (blocks that have expired their proof window
# without the original prover submitting a proof.).
PROVE_UNASSIGNED_BLOCKS=false
# Comma separated list of local proposer addresses, if set, prover will prove the batches proposed by these addresses before the assignment expiration time
LOCAL_PROPOSER_ADDRESSES=
# The size of batch sgx proofs. If set to 1, submits proof upon assignment, if x>1, submits a batch of proofs when x number of blocks are assigned.
# Setting this value to a number greater than 1 means you are enabling the proof aggregation functionality, please consult our documentation to understand the risks before doing so.
SGX_BATCH_SIZE=1
# The size of batch zkvm proofs. If set to 1, submits proof upon assignment, if x>1, submits a batch of proofs when x number of blocks are assigned.
# Setting this value to a number greater than 1 means you are enabling the proof aggregation functionality, please consult our documentation to understand the risks before doing so.
ZKVM_BATCH_SIZE=1
# Time interval to prove blocks, even if the number of pending proofs does not exceed the batchSize, this flag only works when the proof aggregation is enabled.
# We recommend that this value is set no greater than 45min, default is 30min. Ex: 30m0s
FORCE_BATCH_PROVING_INTERVAL=
# Time interval to poll proofs from raiko host.
PROOF_POLLING_INTERVAL=
# Confirmations to the latest L1 block before submitting a proof for a L2 block
BLOCK_CONFIRMATIONS=

# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to Taiko L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`.
ENABLE_PROPOSER=true
# A L1 account (with balance) private key who will send TaikoL1.proposeBlock transactions.
L1_PROPOSER_PRIVATE_KEY=0x94eb3102993b41ec55c241060f47daa0f6372e2e3ad7e91612ae36c364042e44
# Address of the proposed block's suggested L2 fee recipient.
L2_SUGGESTED_FEE_RECIPIENT=0xD51a7E12997f6f1D04AcCC2b4053307a62b373cb
# Contract address of the signal service on L1. the purpose is to listen to events coming from this contract and when a new bridge in is detected, we force propose a block on taiko proposer
INBOX_ADDRESS=0x28047B039241A5b9518044c7c8755F53cbC47e53
# Comma-delineated list (no spaces) of prover endpoints proposer should query when attempting to propose a block
# If you keep this default value you must also enable a prover by setting ENABLE_PROVER=false
# Whether to send EIP-4844 blob transactions when proposing blocks.
L1_BLOB_ALLOWED=true
# Comma-delimited local tx pool addresses you want to prioritize, useful to set your proposer to only propose blocks with your prover's transactions.
TXPOOL_LOCALS=
# If set to true, the proposer will use calldata as DA when the blob fee is more expensive than using calldata.
L1_FALLBACK_TO_CALLDATA=
# If set to true, enable revert protection. When you are not the first taiko proposer in current L1 block, you would revert.
# This function must be supported by your PBS provider to be effective.
REVERT_PROTECTION=
# Minimum tip (in GWei) for a transaction to propose.
EPOCH_MIN_TIP=
# Time interval to propose L2 pending transactions
EPOCH_INTERVAL=5s
# Minimum time interval to force proposing a block, even if there are no transaction in mempool
EPOCH_MIN_PROPOSING_INTERVAL=
# If set, after this many epochs, proposer will be allowed to propose zero tip transactions once
ALLOW_ZERO_TIP_INTERVAL=
# Maximum number of transaction lists which will be proposed inside one proposing epoch
MAX_TX_LISTS_PER_EPOCH=
# ProverSet Address: We highly recommend you consult the deploy a proverset guide and use separate EOAs for prover and proposer to prevent nonce issues.
PROVER_SET=

# Transaction Manager Flags (Leave blank if using default values.) These only affect Prover and Proposer.

# The multiplier applied to fee suggestions to put a hard limit on fee increases
TX_FEE_LIMIT_MULTIPLIER=
# The minimum threshold (in GWei) at which fee bumping starts to be capped. Allows arbitrary fee bumps below this threshold.
TX_FEE_LIMIT_THRESHOLD=
# Gas limit will be used for transactions (0 means using gas estimation)
TX_GAS_LIMIT=1000000
# Enforces a minimum base fee (in GWei) to assume when determining tx fees. 1 GWei by default
TX_MIN_BASEFEE=
# Enforces a minimum tip cap (in GWei) to use when determining tx fees. 1 GWei by default.
TX_MIN_TIP_CAP=
# Timeout for aborting a tx send if the tx does not make it to the mempool.
TX_NOT_IN_MEMPOOL_TIMEOUT=30s
# Number of confirmations which we will wait after sending a transaction
TX_NUM_CONFIRMATIONS=
# Frequency to poll for receipts
TX_RECEIPT_QUERY_INTERVAL=
# Duration we will wait before resubmitting a transaction to L1
TX_RESUBMISSION=10s
# Number of ErrNonceTooLow observations required to give up on a tx at a particular nonce without receiving confirmation
TX_SAFE_ABORT_NONCE_TOO_LOW=
# Timeout for sending transactions. If 0 it is disabled.
TX_SEND_TIMEOUT=

############################### RELAYER #####################################
MYSQL_USER=admin
MYSQL_PASSWORD=admin
MYSQL_DATABASE=relayer
MYSQL_HOST=localhost:3306
MYSQL_MAX_IDLE_CONNS=50
MYSQL_MAX_OPEN_CONNS=3000
MYSQL_CONN_MAX_LIFETIME=100000
RABBITMQ_USER=root
RABBITMQ_PASSWORD=root
RABBITMQ_PORT=5672
CONFIRMATIONS_BEFORE_PROCESSING=1
NUM_GOROUTINES=100
BLOCK_BATCH_SIZE=10
QUEUE_PREFETCH=100
HEADER_SYNC_INTERVAL_IN_SECONDS=60
PROCESSOR_PRIVATE_KEY=94eb3102993b41ec55c241060f47daa0f6372e2e3ad7e91612ae36c364042e44
PROCESSING_FEE_MULTIPLIER=1.75
PROFITABLE_ONLY=false
TX_MIN_TIP_CAP=1.0
