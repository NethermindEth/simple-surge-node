############################### DEFAULT #####################################
ENABLE_TAIKO_CLIENT_METRICS=true

CHAINSPEC_PATH_ON_HOST=./static/devnet/chainspec.json

# L1
L1_CHAINID=3151908

L1_ENDPOINT_HTTP=http://host.docker.internal:32003
L1_ENDPOINT_WS=ws://host.docker.internal:32004
L1_BEACON_HTTP=http://host.docker.internal:33001

# L2
L2_CHAINID=763374
L2_GENESIS_HASH=0x57b0ac6ee10254955f8d5046893b07f42c397386a12ceb2ad5de302969a13cdf

L2_BRIDGE=0x7633740000000000000000000000000000000001
L2_ERC20_VAULT=0x7633740000000000000000000000000000000002
L2_ERC721_VAULT=0x7633740000000000000000000000000000000003
L2_ERC1155_VAULT=0x7633740000000000000000000000000000000004
L2_SIGNAL_SERVICE=0x7633740000000000000000000000000000000005
TAIKO_ANCHOR=0x7633740000000000000000000000000000010001

L2_ENDPOINT_HTTP=http://host.docker.internal:8547
L2_ENDPOINT_WS=ws://host.docker.internal:8548
L2_AUTH_HTTP=http://host.docker.internal:8552

# Nethermind log level
NETHERMIND_LOG_LEVEL=debug

# Surge
SURGE_PROPOSING_BLOCK_GAS=
SURGE_PROVING_BLOCK_GAS=
SURGE_OFF_CHAIN_COSTS=
SURGE_PRICE_FLUCTUATION_MODIFIER=

# Exposed ports
L2_METRICS_PORT=8018
L2_HTTP_PORT=8547
L2_WS_PORT=8548
L2_ENGINE_API_PORT=8552
L2_NETWORK_DISCOVERY_PORT=30313
POSTGRES_PORT=5432
VERIFIER_PORT=8050
BLOCKSCOUT_PORT=4000
BLOCKSCOUT_API_HOST=localhost
BLOCKSCOUT_FRONTEND_PORT=3000
PROMETHEUS_PORT=9091
GRAFANA_PORT=3001

############################### REQUIRED #####################################
# Owner private key for contract deployments
PRIVATE_KEY=0x94eb3102993b41ec55c241060f47daa0f6372e2e3ad7e91612ae36c364042e44

# Profitability check
CHECK_PROFITABILITY=false

# Allow empty blocks
ALLOW_EMPTY_BLOCKS=false

############################### PROTOCOL #####################################
# Log level of contract deployments
LOG_LEVEL="-vv"
# Block gas limit of contract deployments
BLOCK_GAS_LIMIT=200000000
# Owner and Executor Configuration
OWNER_MULTISIG=0x60997970C51812dc3A010C7d01b50e0d17dc79C8
OWNER_MULTISIG_SIGNERS=0x7633740000000000000000000000000000000002,0x7633740000000000000000000000000000000003,0x7633740000000000000000000000000000000004
TIMELOCK_PERIOD=86400
# DAO Configuration
DAO=0x7633740000000000000000000000000000000001
# Liveness Configuration
MAX_VERIFICATION_DELAY=100
MIN_VERIFICATION_STREAK=10
LIVENESS_BOND_BASE=100000000000000000
LIVENESS_BOND_PER_BLOCK=100000000000000000
# Preconf Configuration
INCLUSION_WINDOW=24
INCLUSION_FEE_IN_GWEI=100
FALLBACK_PRECONF=0x7633740000000000000000000000000000000001
# RISC0 Verifier Configuration
# RISC0_BLOCK_PROVING_IMAGE_ID=0x002eb51e99132ea02f27349345fe7e98c6867beab29a2426d1e4f693e2857bcd
# RISC0_AGGREGATION_IMAGE_ID=0x00dfdb4cc33bb068dce12585b8ecfcc8c3ae194ffaf6d19e0ebfd3fc33145c7a
# SP1 Verifier Configuration
# SP1_BLOCK_PROVING_PROGRAM_VKEY=7551aa7009644e503ffa7fce53f657264a3a1b45516afc5b026ff7e43c10d62a
# SP1_AGGREGATION_PROGRAM_VKEY=0x000795db478eeeb7bef37247eb93389ba2a4e6c1cbe59a49afc3bd6ac2ad27ba
# SGX Verifier Configuration
FMSPC=00906ED50000
TCB_LINK="https://api.trustedservices.intel.com/sgx/certification/v3/tcb?fmspc=${FMSPC}"
QE_IDENTITY_LINK="https://api.trustedservices.intel.com/sgx/certification/v3/qe/identity"
# MR_ENCLAVE=3ec57ed7974834005b8df5d80e0edfc69542580a0a305f80fd81199c181ac7cc
# MR_SIGNER=ca0583a715534a8c981b914589a7f0dc5d60959d9ae79fb5353299a4231673d5
QEID_PATH="/test/sgx-assets/qe_identity.json"
TCB_INFO_PATH="/test/sgx-assets/tcb_info.json"
# V3_QUOTE_BYTES=03000200000000000b001000939a7233f79c4ca9940a0db3957f0607f120255a6d29b13c5a97f7e2bded18330000000015150b07ff800e0000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000007000000000000003ec57ed7974834005b8df5d80e0edfc69542580a0a305f80fd81199c181ac7cc0000000000000000000000000000000000000000000000000000000000000000ca0583a715534a8c981b914589a7f0dc5d60959d9ae79fb5353299a4231673d500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c6175b0b519fd73bb6b5cc5bea4895e56104780a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044100000c4ee9d4e34a17b2099f9417888390c6d53ea749ec76df01210e2979c446b6324291a77892f08ca50e080c9fb751320f6b33ce504a02ed36b27e6ee33bc51f51edcc70e02ad7240cdf217886140340832c403f921a77e5da4a8251bbc3c52f8b5d2ddb259b51858e1418cf7654e553f3c60d387a3a1854e00d30ad816ce302ff315150b07ff800e00000000000000000000000000000000000000000000000000000000000000000000000000000000001500000000000000070000000000000078fe8cfd01095a0f108aff5c40624b93612d6c28b73e1a8d28179c9ddf0e068600000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096e0b3e7d61fda4ebbca044c165b7e31a488c325f1c438153df056329899709d0000000000000000000000000000000000000000000000000000000000000000fe095b7c9a52827a2fa19324360ba4821c8b5a6d7068cc85b32ac4e795b34e63e6c6bd722e1988819e67f7722c4f69698cc9cf4462c4850adbbb1a3c1ef206952000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500dc0d00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949456a6a4343424453674177494241674956414d355778474753413543316738436664583042644d65736a4161434d416f4743437147534d343942414d430a4d484578497a416842674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b0a4442464a626e526c6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e560a4241674d416b4e424d517377435159445651514745774a56557a4165467730794e5441324d546b774e6a41344e444a614677307a4d6a41324d546b774e6a41340a4e444a614d484178496a416742674e5642414d4d47556c756447567349464e4857434251513073675132567964476c6d61574e6864475578476a415942674e560a42416f4d45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b470a413155454341774351304578437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741450a534e417632765034454d48536e364e7a77314d4a56467366484143625577647569365a45594156782b5163414335743474476f445876636d7239717766724e410a726933416c6f5657716e544e377639316e78574334364f434171677767674b6b4d42384741315564497751594d426141464e446f71747031312f6b75535265590a504873555a644456386c6c4e4d477747413155644877526c4d474d77596142666f463247573268306448427a4f693876595842704c6e527964584e305a57527a0a5a584a3261574e6c63793570626e526c6243356a62323076633264344c324e6c636e52705a6d6c6a5958527062323476646a517663474e7259334a7350324e680a5058427962324e6c63334e7663695a6c626d4e765a476c755a7a316b5a584977485159445652304f42425945464c713947373168774d6478372f696f462f6a520a66706531377032374d41344741315564447745422f775145417749477744414d42674e5648524d4241663845416a41414d4949423141594a4b6f5a496876684e0a415130424249494278544343416345774867594b4b6f5a496876684e41513042415151516e43434f70394f2b436972694e3366544a7167346e7a4343415751470a43697147534962345451454e41514977676746554d42414743797147534962345451454e41514942416745564d42414743797147534962345451454e415149430a416745564d42414743797147534962345451454e41514944416745434d42414743797147534962345451454e41514945416745454d42414743797147534962340a5451454e41514946416745424d42454743797147534962345451454e41514947416749416744415142677371686b69472b4530424451454342774942446a41510a42677371686b69472b45304244514543434149424144415142677371686b69472b45304244514543435149424144415142677371686b69472b453042445145430a436749424144415142677371686b69472b45304244514543437749424144415142677371686b69472b45304244514543444149424144415142677371686b69470a2b45304244514543445149424144415142677371686b69472b45304244514543446749424144415142677371686b69472b4530424451454344774942414441510a42677371686b69472b45304244514543454149424144415142677371686b69472b45304244514543455149424454416642677371686b69472b453042445145430a4567515146525543424147414467414141414141414141414144415142676f71686b69472b45304244514544424149414144415542676f71686b69472b4530420a44514545424159416b473756414141774477594b4b6f5a496876684e4151304242516f424144414b42676771686b6a4f5051514441674e4941444246416941620a597055715470513662672f4d697a376a4473517873706f515a6b4768584c5245564f704a303471734b774968414e594b355a53614c734a61756a4a44727331670a5238356e6f304863617341747a497964316b74476855596a0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436d444343416a36674177494241674956414e446f71747031312f6b7553526559504873555a644456386c6c4e4d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484578497a41680a42674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b4442464a626e526c0a6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e420a4d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424c39712b4e4d7032494f670a74646c31626b2f75575a352b5447516d38614369387a373866732b664b435133642b75447a586e56544154325a68444369667949754a77764e33774e427039690a484253534d4a4d4a72424f6a6762737767626777487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e427177770a556759445652306642457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356b5a584977485159445652304f42425945464e446f0a71747031312f6b7553526559504873555a644456386c6c4e4d41344741315564447745422f77514541774942426a415342674e5648524d4241663845434441470a4151482f416745414d416f4743437147534d343942414d43413067414d4555434951434a6754627456714f795a316d336a716941584d365159613672357357530a34792f4737793875494a4778647749675271507642534b7a7a516167424c517135733541373070646f6961524a387a2f3075447a344e675639316b3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a00
# Foundry Configuration
FOUNDRY_PROFILE=layer1

############################### OPTIONAL #####################################
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=true
# SGX Raiko service endpoint, required if not running a guardian prover.
SGX_RAIKO_HOST=
# ZKVM Raiko service endpoint.
RAIKO_HOST_ZKVM=
# Timeout in minutes for raiko request
RAIKO_REQUEST_TIMEOUT=60s
# If set, prover will start proving batches from the batch with this ID
STARTING_BATCH_ID=
# ZKVM Raiko service configs
RAIKO_SP1_RECURSION="plonk"
RAIKO_SP1_PROVER="local"
RAIKO_RISC0_BONSAI=false
RAIKO_RISC0_SNARK=true
RAIKO_RISC0_PROFILE=false
RAIKO_RISC0_EXECUTION_PO2=20
# A L1 account private key (with a balance of TTKOh deposited on TaikoL1) which will be used to sign the bond for proving the block.
# WARNING: only use a test account, pasting your private key in plain text here is not secure.
L1_PROVER_PRIVATE_KEY=0x94eb3102993b41ec55c241060f47daa0f6372e2e3ad7e91612ae36c364042e44
# Whether to prove unassigned blocks or not (blocks that have expired their proof window
# without the original prover submitting a proof.).
PROVE_UNASSIGNED_BLOCKS=false
# Comma separated list of local proposer addresses, if set, prover will prove the batches proposed by these addresses before the assignment expiration time
LOCAL_PROPOSER_ADDRESSES=
# The size of batch sgx proofs. If set to 1, submits proof upon assignment, if x>1, submits a batch of proofs when x number of blocks are assigned.
# Setting this value to a number greater than 1 means you are enabling the proof aggregation functionality, please consult our documentation to understand the risks before doing so.
SGX_BATCH_SIZE=1
# The size of batch zkvm proofs. If set to 1, submits proof upon assignment, if x>1, submits a batch of proofs when x number of blocks are assigned.
# Setting this value to a number greater than 1 means you are enabling the proof aggregation functionality, please consult our documentation to understand the risks before doing so.
ZKVM_BATCH_SIZE=1
# Time interval to prove blocks, even if the number of pending proofs does not exceed the batchSize, this flag only works when the proof aggregation is enabled.
# We recommend that this value is set no greater than 45min, default is 30min. Ex: 30m0s
FORCE_BATCH_PROVING_INTERVAL=
# Time interval to poll proofs from raiko host.
PROOF_POLLING_INTERVAL=
# Confirmations to the latest L1 block before submitting a proof for a L2 block
BLOCK_CONFIRMATIONS=

# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to Taiko L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`.
ENABLE_PROPOSER=true
# A L1 account (with balance) private key who will send TaikoL1.proposeBlock transactions.
L1_PROPOSER_PRIVATE_KEY=0x94eb3102993b41ec55c241060f47daa0f6372e2e3ad7e91612ae36c364042e44
# Address of the proposed block's suggested L2 fee recipient.
L2_SUGGESTED_FEE_RECIPIENT=0xD51a7E12997f6f1D04AcCC2b4053307a62b373cb
# Contract address of the signal service on L1. the purpose is to listen to events coming from this contract and when a new bridge in is detected, we force propose a block on taiko proposer
INBOX_ADDRESS=0x28047B039241A5b9518044c7c8755F53cbC47e53
# Comma-delineated list (no spaces) of prover endpoints proposer should query when attempting to propose a block
# If you keep this default value you must also enable a prover by setting ENABLE_PROVER=false
# Whether to send EIP-4844 blob transactions when proposing blocks.
BLOB_ALLOWED=true
# Comma-delimited local tx pool addresses you want to prioritize, useful to set your proposer to only propose blocks with your prover's transactions.
TXPOOL_LOCALS=
# If set to true, the proposer will use calldata as DA when the blob fee is more expensive than using calldata.
FALLBACK_TO_CALLDATA=
# If set to true, enable revert protection. When you are not the first taiko proposer in current L1 block, you would revert.
# This function must be supported by your PBS provider to be effective.
REVERT_PROTECTION=
# Minimum tip (in GWei) for a transaction to propose.
EPOCH_MIN_TIP=
# Time interval to propose L2 pending transactions
EPOCH_INTERVAL=5s
# Minimum time interval to force proposing a block, even if there are no transaction in mempool
EPOCH_MIN_PROPOSING_INTERVAL=
# If set, after this many epochs, proposer will be allowed to propose zero tip transactions once
ALLOW_ZERO_TIP_INTERVAL=
# Maximum number of transaction lists which will be proposed inside one proposing epoch
MAX_TX_LISTS_PER_EPOCH=
# ProverSet Address: We highly recommend you consult the deploy a proverset guide and use separate EOAs for prover and proposer to prevent nonce issues.
PROVER_SET=

# Transaction Manager Flags (Leave blank if using default values.) These only affect Prover and Proposer.

# The multiplier applied to fee suggestions to put a hard limit on fee increases
TX_FEE_LIMIT_MULTIPLIER=
# The minimum threshold (in GWei) at which fee bumping starts to be capped. Allows arbitrary fee bumps below this threshold.
TX_FEE_LIMIT_THRESHOLD=
# Gas limit will be used for transactions (0 means using gas estimation)
TX_GAS_LIMIT=1000000
# Enforces a minimum base fee (in GWei) to assume when determining tx fees. 1 GWei by default
TX_MIN_BASEFEE=
# Enforces a minimum tip cap (in GWei) to use when determining tx fees. 1 GWei by default.
TX_MIN_TIP_CAP=
# Timeout for aborting a tx send if the tx does not make it to the mempool.
TX_NOT_IN_MEMPOOL_TIMEOUT=30s
# Number of confirmations which we will wait after sending a transaction
TX_NUM_CONFIRMATIONS=
# Frequency to poll for receipts
TX_RECEIPT_QUERY_INTERVAL=
# Duration we will wait before resubmitting a transaction to L1
TX_RESUBMISSION=10s
# Number of ErrNonceTooLow observations required to give up on a tx at a particular nonce without receiving confirmation
TX_SAFE_ABORT_NONCE_TOO_LOW=
# Timeout for sending transactions. If 0 it is disabled.
TX_SEND_TIMEOUT=

############################### RELAYER #####################################
MYSQL_USER=admin
MYSQL_PASSWORD=admin
MYSQL_DATABASE=relayer
MYSQL_HOST=localhost:3306
MYSQL_MAX_IDLE_CONNS=50
MYSQL_MAX_OPEN_CONNS=3000
MYSQL_CONN_MAX_LIFETIME=100000
RABBITMQ_USER=root
RABBITMQ_PASSWORD=root
RABBITMQ_PORT=5672
CONFIRMATIONS_BEFORE_PROCESSING=1
NUM_GOROUTINES=100
BLOCK_BATCH_SIZE=10
QUEUE_PREFETCH=100
HEADER_SYNC_INTERVAL_IN_SECONDS=60
PROCESSOR_PRIVATE_KEY=94eb3102993b41ec55c241060f47daa0f6372e2e3ad7e91612ae36c364042e44
PROCESSING_FEE_MULTIPLIER=1.75
PROFITABLE_ONLY=false
TX_MIN_TIP_CAP=1.0
