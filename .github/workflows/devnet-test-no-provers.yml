name: Devnet Provision Check (No Provers)

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual trigger
  pull_request:
    paths:
      - 'docker-compose*.yml'
      - 'surge-*.sh'
      - 'script/devnet-provision-check.sh'
      - 'script/devnet-provision-check-ci.sh'
      - 'script/util/common.sh'
      - '.github/workflows/devnet-test-no-provers.yml'

env:
  SURGE_ETHEREUM_PACKAGE_REPO: 'NethermindEth/surge-ethereum-package'
  SURGE_ETHEREUM_PACKAGE_REF: 'main'

jobs:
  devnet-provision-check-no-provers:
    name: Devnet Provision Check (No Provers)
    runs-on: ubuntu-22.04
    timeout-minutes: 45

    steps:
      - name: Checkout simple-surge-node
        uses: actions/checkout@v4
        with:
          path: simple-surge-node

      - name: Checkout surge-ethereum-package
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SURGE_ETHEREUM_PACKAGE_REPO }}
          ref: ${{ env.SURGE_ETHEREUM_PACKAGE_REF }}
          path: surge-ethereum-package

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Install Kurtosis CLI
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt-get update
          sudo apt-get install -y kurtosis-cli
          kurtosis version

      - name: Verify Docker installation
        run: |
          docker --version
          docker compose version
          docker info

      - name: Run Devnet Provision Check (No Provers)
        working-directory: simple-surge-node
        env:
          L1_PACKAGE_DIR: ../surge-ethereum-package
          L1_ENVIRONMENT: local
          L1_MODE: silence
          L1_RPC_URL: http://localhost:32003
          L1_STABILIZE_WAIT: 20
          ENABLE_PROVER: false
        run: |
          ./script/devnet-provision-check-ci.sh

      - name: Collect Docker logs on failure
        if: failure()
        working-directory: simple-surge-node
        run: |
          echo "Docker Compose Services Status"
          docker compose ps || true

          echo "Docker Compose Logs (last 100 lines)"
          docker compose logs --tail=100 || true

          echo "Kurtosis Enclaves"
          kurtosis enclave ls || true

          echo "Kurtosis Services (surge-devnet)"
          kurtosis enclave inspect surge-devnet || true

      - name: Cleanup - Stop L2 services
        if: always()
        working-directory: simple-surge-node
        run: |
          ./surge-remover.sh --devnet-non-interactive || true

      - name: Cleanup - Stop L1 devnet
        if: always()
        run: |
          cd surge-ethereum-package && ./remove-surge-devnet-l1.sh --force || true

      - name: Cleanup - Docker system prune
        if: always()
        run: |
          docker system prune -af --volumes || true

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: devnet-provision-check-no-provers-logs
          path: |
            simple-surge-node/deployment/*.json
            simple-surge-node/*.log
          retention-days: 7
          if-no-files-found: ignore

      - name: Notify on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Nightly Devnet Provision Check (No Provers) Failed',
              body: 'The nightly devnet provision check (no provers) failed on ' + new Date().toISOString() + '\n\nWorkflow run: ' + context.serverUrl +'/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId,
              labels: ['bug', 'devnet', 'provision-check', 'automated']
            })