name: Devnet E2E Test

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual trigger
  pull_request:
    paths:
      - 'docker-compose*.yml'
      - 'surge-*.sh'
      - 'script/devnet-e2e-provision-check.sh'
      - '.github/workflows/devnet-e2e-test.yml'

env:
  SURGE_ETHEREUM_PACKAGE_REPO: 'NethermindEth/surge-ethereum-package'
  SURGE_ETHEREUM_PACKAGE_REF: 'main'

jobs:
  devnet-e2e-test:
    name: Full Devnet E2E Test
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 30720
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout simple-surge-node
        uses: actions/checkout@v4
        with:
          path: simple-surge-node

      - name: Checkout surge-ethereum-package
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SURGE_ETHEREUM_PACKAGE_REPO }}
          ref: ${{ env.SURGE_ETHEREUM_PACKAGE_REF }}
          path: surge-ethereum-package

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Install Kurtosis CLI
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt-get update
          sudo apt-get install -y kurtosis-cli
          kurtosis version

      - name: Verify Docker installation
        run: |
          docker --version
          docker compose version
          docker info

      - name: Update e2e script with L1 deployment paths
        working-directory: simple-surge-node
        run: |
          # Create a wrapper script that handles L1 deployment
          cat > script/devnet-e2e-provision-check-ci.sh << 'EOF'
          #!/bin/bash

          set -e

          echo "Starting CI Devnet E2E Health Check"
          echo

          print_success() {
              echo "[SUCCESS] $1"
          }

          print_error() {
              echo "[ERROR] $1"
          }

          print_info() {
              echo "[INFO] $1"
          }

          # Navigate to project root
          cd "$(dirname "$0")/.."

          # Step 0: Deploy L1 Devnet
          echo "Step 0: Deploy L1 Devnet"
          L1_PACKAGE_DIR="../surge-ethereum-package"

          if [ -d "$L1_PACKAGE_DIR" ]; then
              print_info "Running L1 deployment from surge-ethereum-package"
              cd "$L1_PACKAGE_DIR"
              if ./deploy-surge-devnet-l1.sh --environment local --mode silence; then
                  cd -
                  print_success "L1 deployment completed"
              else
                  cd -
                  print_error "L1 deployment failed"
                  exit 1
              fi
          else
              print_error "surge-ethereum-package directory not found at $L1_PACKAGE_DIR"
              print_info "Current directory: $(pwd)"
              print_info "Looking for: $L1_PACKAGE_DIR"
              ls -la ../
              exit 1
          fi
          echo

          # Step 0.5: Wait for L1 to be ready
          echo "Step 0.5: Verify L1 is ready"
          print_info "Waiting 20 seconds for L1 to stabilize..."
          sleep 20

          print_info "Testing L1 RPC endpoint at http://localhost:32003"
          max_retries=10
          retry_count=0

          while [ $retry_count -lt $max_retries ]; do
              if curl -f http://localhost:32003 -X POST -H "Content-Type: application/json" \
                  --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' 2>/dev/null; then
                  echo
                  print_success "L1 RPC is responding"
                  break
              else
                  retry_count=$((retry_count + 1))
                  if [ $retry_count -eq $max_retries ]; then
                      echo
                      print_error "L1 RPC failed to respond after $max_retries retries"
                      exit 1
                  fi
                  print_info "Retry $retry_count/$max_retries - waiting 10s..."
                  sleep 10
              fi
          done
          echo

          # Run the actual e2e provision check
          echo "Running E2E Provision Check"
          ./script/devnet-e2e-provision-check.sh
          EOF

          chmod +x script/devnet-e2e-provision-check-ci.sh

      - name: Run E2E Devnet Test
        working-directory: simple-surge-node
        run: |
          ./script/devnet-e2e-provision-check-ci.sh

      - name: Collect Docker logs on failure
        if: failure()
        working-directory: simple-surge-node
        run: |
          echo "Docker Compose Services Status"
          docker compose ps || true

          echo "Docker Compose Logs (last 100 lines)"
          docker compose logs --tail=100 || true

          echo "Kurtosis Enclaves"
          kurtosis enclave ls || true

          echo "Kurtosis Services (surge-devnet)"
          kurtosis enclave inspect surge-devnet || true

      - name: Cleanup - Stop L2 services
        if: always()
        working-directory: simple-surge-node
        run: |
          ./surge-remover.sh --devnet-non-interactive || true

      - name: Cleanup - Stop L1 devnet
        if: always()
        run: |
          cd surge-ethereum-package && ./remove-surge-devnet-l1.sh --force || true

      - name: Cleanup - Kurtosis
        if: always()
        run: |
          kurtosis clean -a || true

      - name: Cleanup - Docker
        if: always()
        run: |
          docker system prune -af --volumes || true

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: devnet-e2e-logs
          path: |
            simple-surge-node/deployment/*.json
            simple-surge-node/*.log
          retention-days: 7
          if-no-files-found: ignore

      - name: Notify on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Nightly Devnet E2E Test Failed',
              body: `The nightly devnet E2E test failed on ${new Date().toISOString()}\n\nWorkflow run: ${context.serverUrl}/${context.repo.o
wner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['bug', 'devnet', 'e2e-test', 'automated']
            })
