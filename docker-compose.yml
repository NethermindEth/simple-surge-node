services:
  # L2 deployer
  surge-l2-deployer:
    image: nethermind/surge-protocol:sha-93f0d57
    container_name: surge-l2-deployer
    pull_policy: always
    volumes:
      - ./deployer:/deployer
      - ./deployment:/deployment
    depends_on:
      nethermind_execution_client:
        condition: service_healthy
      taiko_client_driver:
        condition: service_started
      taiko_client_proposer:
        condition: service_started
    entrypoint:
      - /bin/sh
      - -c
      - /deployer/setup-surge-l2.sh
    env_file:
      - .env
    environment:
      L1_BRIDGE: ${BRIDGE}
      L1_SIGNAL_SERVICE: ${SIGNAL_SERVICE}
      L1_ERC1155_VAULT: ${ERC1155_VAULT}
      L1_ERC20_VAULT: ${ERC20_VAULT}
      L1_ERC721_VAULT: ${ERC721_VAULT}
      L1_OWNER: ${L1_OWNER}
      FORK_URL: http://l2-nethermind-execution-client:${L2_HTTP_PORT}
      BROADCAST: ${BROADCAST}
      FOUNDRY_PROFILE: layer2
    networks:
      - surge
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'test -f /app/deployments/setup_l2.json'"]
      interval: 2s
      timeout: 2s
      retries: 15
      start_period: 10s
    profiles:
      - l2-deployer

# L2 stack components
  nethermind_execution_client:
    image: nethermindeth/nethermind:v25.0.0-surge
    container_name: l2-nethermind-execution-client
    restart: unless-stopped
    pull_policy: always
    stop_grace_period: 3m
    tty: true
    volumes:
      - ./execution-data:/data/surge
      - ./static/jwtsecret:/tmp/jwt/jwtsecret
      - ${CHAINSPEC_PATH_ON_HOST:-./static/hoodi/chainspec.json}:/chainspec.json
      - ./script:/script
      - ./NLog.config:/nethermind/NLog.config
    networks:
      - surge
    ports:
      - ${L2_NETWORK_DISCOVERY_PORT}:${L2_NETWORK_DISCOVERY_PORT}/tcp
      - ${L2_NETWORK_DISCOVERY_PORT}:${L2_NETWORK_DISCOVERY_PORT}/udp
      - ${L2_METRICS_PORT}:${L2_METRICS_PORT}
      - ${L2_HTTP_PORT}:${L2_HTTP_PORT}
      - ${L2_WS_PORT}:${L2_WS_PORT}
      - ${L2_ENGINE_API_PORT}:${L2_ENGINE_API_PORT}
    env_file:
      - .env
    environment:
      TAIKO_INBOX: ${TAIKO_INBOX}
    entrypoint:
      - /bin/sh
      - -c
      - "/script/start-nethermind.sh"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      com.kurtosistech.custom.metrics_enabled: "true"
      com.kurtosistech.custom.metrics_port: "${L2_METRICS_PORT}"
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/8547'"]
      interval: 2s
      timeout: 2s
      retries: 15
      start_period: 10s
    profiles:
      - driver
      - proposer
      - prover
      - spammer
      - blockscout
      - l2-deployer
      - relayer-l1
      - relayer-l2
      - relayer-api

  taiko_client_driver:
    image: nethermind/taiko-client:sha-4206e2b
    container_name: l2-taiko-consensus-client
    restart: unless-stopped
    pull_policy: always
    depends_on:
      nethermind_execution_client:
        condition: service_healthy
        restart: true
    volumes:
      - ./execution-data:/data/surge
      - ./static/jwtsecret:/tmp/jwt/jwtsecret
      - ./script:/script
    ports:
      - 6060:6060
    env_file:
      - .env
    environment:
      TAIKO_INBOX: ${TAIKO_INBOX}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    entrypoint:
      - /bin/sh
      - -c
      - "/script/start-driver.sh"
    networks:
      - surge
    labels:
      com.kurtosistech.custom.metrics_enabled: "true"
      com.kurtosistech.custom.metrics_port: "6060"
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    profiles:
      - driver
      - proposer
      - prover
      - spammer
      - blockscout
      - l2-deployer
      - relayer-l1
      - relayer-l2
      - relayer-api

  taiko_client_proposer:
    image: nethermind/taiko-client:sha-4206e2b
    container_name: l2-taiko-proposer-client
    restart: unless-stopped
    pull_policy: always
    depends_on:
      nethermind_execution_client:
        condition: service_healthy
        restart: true
      taiko_client_driver:
        condition: service_started
    volumes:
      - ./execution-data:/data/taiko-nethermind
      - ./static/jwtsecret:/tmp/jwt/jwtsecret
      - ./script:/script
    ports:
      - 6061:6061
    env_file:
      - .env
    environment:
      TAIKO_INBOX: ${TAIKO_INBOX}
      L1_SIGNAL_SERVICE: ${SIGNAL_SERVICE}
      L1_BRIDGE: ${BRIDGE}
      TAIKO_WRAPPER: ${TAIKO_WRAPPER}
      FORCED_INCLUSION_STORE: ${FORCED_INCLUSION_STORE}
      SURGE_PROPOSER_WRAPPER: ${SURGE_PROPOSER_WRAPPER}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    entrypoint:
      - /bin/sh
      - -c
      - "/script/start-proposer.sh"
    networks:
      - surge
    labels:
      com.kurtosistech.custom.metrics_enabled: "true"
      com.kurtosistech.custom.metrics_port: "6061"
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    profiles:
      - proposer
      - spammer
      - l2-deployer

  taiko_client_prover_relayer:
    image: nethermind/taiko-client:sha-4206e2b
    container_name: l2-taiko-prover-relayer-client
    restart: unless-stopped
    pull_policy: always
    depends_on:
      nethermind_execution_client:
        condition: service_healthy
        restart: true
      taiko_client_driver:
        condition: service_started
    volumes:
      - ./static/jwtsecret:/tmp/jwt/jwtsecret
      - ./script:/script
    ports:
      - 6062:6062
    env_file:
      - .env
    environment:
      TAIKO_INBOX: ${TAIKO_INBOX}
      SURGE_PROPOSER_WRAPPER: ${SURGE_PROPOSER_WRAPPER}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    entrypoint:
      - /bin/sh
      - -c
      - "/script/start-prover-relayer.sh"
    networks:
      - surge
    labels:
      com.kurtosistech.custom.metrics_enabled: "true"
      com.kurtosistech.custom.metrics_port: "6062"
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    profiles:
      - prover

  # MySQL Database for storing blob data
  mysql:
    image: mysql:8.4
    container_name: l2-taiko-blob-indexer-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: blobindexer
    ports:
      - 3307:3306
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max-connections=1000
      - --innodb-buffer-pool-size=1G
    volumes:
      - ./blobindexer-mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-ppassword"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - surge
    profiles:
      - blobindexer

  # Blob Indexer Service
  blobindexer:
    image: nethermind/surge-blob-indexer:sha-b978642
    container_name: l2-taiko-blob-indexer
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - ${BLOB_INDEXER_PORT}:${BLOB_INDEXER_PORT}
    networks:
      - surge
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BLOB_INDEXER_PORT}/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - blobindexer

  tx-spammer:
    image: ethpandaops/spamoor:master
    container_name: l2-tx-spammer
    restart: unless-stopped
    pull_policy: always
    depends_on:
      nethermind_execution_client:
        condition: service_healthy
      taiko_client_driver:
        condition: service_started
      taiko_client_proposer:
        condition: service_started
    volumes:
      - ./static/spamoor:/config
    ports:
      - 8080:8080
    entrypoint:
      - ./spamoor-daemon
    command:
      - "--rpchost=http://l2-nethermind-execution-client:${L2_HTTP_PORT}"
      - "--startup-spammer=/config/scenario-configs.yml"
      - "--privkey=${PRIVATE_KEY}"
    networks:
      - surge
    labels:
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    profiles:
      - spammer

  blockscout-postgres:
    image: postgres:alpine
    container_name: l2-blockscout-postgres
    restart: unless-stopped
    pull_policy: always
    volumes:
      - ./blockscout-postgres-data:/var/lib/postgresql
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_DB: blockscout
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: MyPassword1!
      PGDATA: /var/lib/postgresql/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - "postgres"
      - "-c"
      - "max_connections=1000"
    networks:
      - surge
    labels:
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    profiles:
      - blockscout

  blockscout-verifer:
    image: ghcr.io/blockscout/smart-contract-verifier:latest
    container_name: l2-blockscout-verif
    restart: unless-stopped
    pull_policy: always
    depends_on:
      nethermind_execution_client:
        condition: service_healthy
      taiko_client_driver:
        condition: service_started
      blockscout-postgres:
        condition: service_started
    ports:
      - ${VERIFIER_PORT}:${VERIFIER_PORT}
    environment:
      SMART_CONTRACT_VERIFIER__SERVER__HTTP__ADDR: 0.0.0.0:${VERIFIER_PORT}
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      APP_USER: app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - "./smart-contract-verifier-server"
    networks:
      - surge
    labels:
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    profiles:
      - blockscout

  blockscout:
    image: ghcr.io/blockscout/blockscout:latest
    container_name: l2-blockscout
    restart: unless-stopped
    pull_policy: always
    depends_on:
      nethermind_execution_client:
        condition: service_healthy
        restart: true
      taiko_client_driver:
        condition: service_started
      blockscout-postgres:
        condition: service_started
      blockscout-verifer:
        condition: service_started
    ports:
      - ${BLOCKSCOUT_PORT}:${BLOCKSCOUT_PORT}
    environment:
      MICROSERVICE_SC_VERIFIER_URL: http://l2-blockscout-verif:${VERIFIER_PORT}/api
      ECTO_USE_SSL: false
      ETHEREUM_JSONRPC_HTTP_URL: http://${BLOCKSCOUT_L2_HOST}:${L2_HTTP_PORT}/
      DATABASE_URL: postgresql://postgres:MyPassword1!@l2-blockscout-postgres:5432/blockscout
      ETHEREUM_JSONRPC_VARIANT: nethermind
      ETHEREUM_JSONRPC_TRACE_URL: http://${BLOCKSCOUT_L2_HOST}:${L2_HTTP_PORT}/
      SUBNETWORK: Surge
      API_V2_ENABLED: true
      PORT: ${BLOCKSCOUT_PORT}
      NETWORK: Surge
      MICROSERVICE_SC_VERIFIER_TYPE: sc_verifier
      INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: true
      COIN: ETH
      MICROSERVICE_SC_VERIFIER_ENABLED: true
      SECRET_KEY_BASE: 56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      DISABLE_WEBAPP: true
      ADMIN_PANEL_ENABLED: false
      DISABLE_API:
      API_V1_READ_METHODS_DISABLED:
      API_V1_WRITE_METHODS_DISABLED:
      CHAIN_TYPE:
      BRIDGED_TOKENS_ENABLED:
      API_GRAPHQL_MAX_COMPLEXITY:
      RELEASE_VERSION: 8.1.1
      BLOCKSCOUT_VERSION: v8.1.1
    command:
      - "/bin/sh"
      - "-c"
      - "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - surge
    labels:
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    profiles:
      - blockscout

  blockscout-frontend:
    image: ghcr.io/blockscout/frontend:latest
    container_name: l2-blockscout-frontend
    restart: unless-stopped
    pull_policy: always
    depends_on:
      nethermind_execution_client:
        condition: service_healthy
      taiko_client_driver:
        condition: service_started
      blockscout-postgres:
        condition: service_started
      blockscout-verifer:
        condition: service_started
      blockscout:
        condition: service_started
    ports:
      - ${BLOCKSCOUT_FRONTEND_PORT}:${BLOCKSCOUT_FRONTEND_PORT}
    environment:
      PORT: ${BLOCKSCOUT_FRONTEND_PORT}
      NEXT_PUBLIC_NETWORK_ICON: https://docs.surge.wtf/img/favicon.ico
      NEXT_PUBLIC_NETWORK_ID: ${L2_CHAINID}
      NEXT_PUBLIC_APP_PROTOCOL: http
      HOSTNAME: 0.0.0.0
      NEXT_PUBLIC_AD_BANNER_PROVIDER: none
      NEXT_PUBLIC_HAS_BEACON_CHAIN: false
      NEXT_PUBLIC_GAS_TRACKER_ENABLED: true
      # NEXT_PUBLIC_DISABLE_EXCHANGE_RATES: true
      NEXT_PUBLIC_NETWORK_NAME: Surge
      NEXT_PUBLIC_APP_HOST: 127.0.0.1
      NEXT_PUBLIC_API_PROTOCOL: http
      NEXT_PUBLIC_API_HOST: ${BLOCKSCOUT_API_HOST}:${BLOCKSCOUT_PORT}
      NEXT_PUBLIC_USE_NEXT_JS_PROXY: false
      NEXT_PUBLIC_NETWORK_RPC_URL: http://l2-nethermind-execution-client:${L2_HTTP_PORT}
      NEXT_PUBLIC_IS_TESTNET: true
      NEXT_PUBLIC_API_WEBSOCKET_PROTOCOL: ws
      NEXT_PUBLIC_APP_PORT: ${BLOCKSCOUT_FRONTEND_PORT}
      NEXT_PUBLIC_NETWORK_VERIFICATION_TYPE: validation
      NEXT_PUBLIC_AD_TEXT_PROVIDER: none
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      NODE_VERSION: 22.11.0
      YARN_VERSION: 1.22.22
      ENVS_PRESET:
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - surge
    labels:
      com.kurtosistech.custom.logs_enabled: "true"
      com.kurtosistech.custom.custom_network: "devnet"
    profiles:
      - blockscout

networks:
  surge:
    name: surge-network
    external: true
