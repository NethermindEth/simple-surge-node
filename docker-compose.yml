services:
  nethermind_execution_l2:
    image: nethermindeth/nethermind:surge-2b6ed5201
    container_name: execution-taiko-l2-client
    restart: unless-stopped
    pull_policy: always
    stop_grace_period: 3m
    tty: true
    volumes:
      - ./jwtsecret:/tmp/jwt/jwtsecret
      - ./chainspec.json:/chainspec.json
    networks:
      - surge
    ports:
      - 30313:30313/tcp
      - 30313:30313/udp
      - 8018:8018
      - 8547:8547
      - 8548:8548
      - 8552:8552
    command:
      - --config=none
      - --datadir=/data/taiko-geth
      - --Init.ChainSpecPath=/chainspec.json
      - --Init.GenesisHash=0xbeced3738f1246571cccabc82a1e6cbd9ed9d5f7ed2b6c7ded28f9722317bd9e
      - --Init.DiscoveryEnabled=false
      - --Metrics.Enabled=true
      - --Metrics.ExposePort=8018
      # - --Network.Bootnodes=${BOOT_NODES}
      - --JsonRpc.Enabled=true
      - --JsonRpc.EnabledModules=[debug,eth,net,web3,txpool,rpc,subscribe,trace,personal,proof,parity,health]
      - --JsonRpc.Host=0.0.0.0
      - --JsonRpc.Port=8547
      - --JsonRpc.WebSocketsPort=8548
      - --JsonRpc.JwtSecretFile=/tmp/jwt/jwtsecret
      - --JsonRpc.EngineHost=0.0.0.0
      - --JsonRpc.EnginePort=8552
      - --Network.DiscoveryPort=30313
      - --Network.P2PPort=30313
      - --Sync.FastSync=false
      - --Sync.SnapSync=false
      - --HealthChecks.Enabled=true
      - --log=${NETHERMIND_OP_LOG_LEVEL}
      - --JsonRpc.MaxBatchResponseBodySize=335544320
      - --JsonRpc.MaxBatchSize=102400
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/8547'"]
      interval: 2s
      timeout: 2s
      retries: 15
      start_period: 10s
    profiles:
      - nethermind_execution_l2
      - prover
      - proposer

  l2_execution_engine:
    image: nethswitchboard/taiko-geth:surge
    restart: unless-stopped
    pull_policy: always
    env_file:
      - .env
    stop_grace_period: 3m
    volumes:
      # - l2_execution_engine_data:/data/taiko-geth
      - ./jwtsecret:/tmp/jwt/jwtsecret
    ports:
      - "6061:6060"
      - "8549:8545"
      - "8550:8546"
      - "30307:30306"
      - "30307:30306/udp"
    command: |
      --taiko
      --networkid 763374
      --gcmode archive
      --datadir /data/taiko-geth
      --metrics
      --metrics.addr "0.0.0.0"
      --authrpc.addr "0.0.0.0"
      --authrpc.vhosts "*"
      --http
      --http.api debug,eth,net,web3,txpool,taiko
      --http.addr "0.0.0.0"
      --http.vhosts "*"
      --ws
      --ws.api debug,eth,net,web3,txpool,taiko
      --ws.addr "0.0.0.0"
      --ws.origins "*"
      --gpo.defaultprice "10000000"
      --port 30306
      --discovery.port 30306
      --authrpc.jwtsecret /tmp/jwt/jwtsecret
      ${GETH_ADDITIONAL_ARGS:-}
    profiles:
      - l2_execution_engine
      - prover
      - proposer

  taiko_client_driver:
    image: nethsurge/taiko-client:f042ca8
    container_name: consensus-taiko-l2-client
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
    volumes:
      - ./jwtsecret:/tmp/jwt/jwtsecret
    networks:
      - surge
    entrypoint:
      - taiko-client
    command:
      - driver
      - --l1.ws=${L1_ENDPOINT_WS}
      - --l2.ws=ws://execution-taiko-l2-client:8548
      - --l1.beacon=${L1_BEACON_HTTP}
      - --l2.auth=http://execution-taiko-l2-client:8552
      - --taikoL1=${TAIKO_L1_ADDRESS}
      - --taikoL2=${TAIKO_L2_ADDRESS}
      - --jwtSecret=/tmp/jwt/jwtsecret
      # - --verbosity=4
      # - --p2p.sync
      # - --p2p.checkPointSyncUrl=${P2P_SYNC_URL}
    profiles:
      - nethermind_execution_l2
      - prover
      - proposer

  taiko_client_driver_geth:
    image: nethsurge/taiko-client:f042ca8
    # us-docker.pkg.dev/evmchain/images/taiko-client:taiko-client-v0.39.2
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - l2_execution_engine
    env_file:
      - .env
    volumes:
      - ./execution-data-taiko:/data/taiko-geth
      - ./jwtsecret:/tmp/jwt/jwtsecret
    entrypoint:
      - taiko-client
    command:
      - driver
      - --l1.ws=${L1_ENDPOINT_WS}
      - --l2.ws=ws://l2_execution_engine:8546
      - --l1.beacon=${L1_BEACON_HTTP}
      - --l2.auth=http://l2_execution_engine:8551
      - --taikoL1=${TAIKO_L1_ADDRESS}
      - --taikoL2=${TAIKO_L2_ADDRESS}
      - --jwtSecret=/tmp/jwt/jwtsecret
    profiles:
      - l2_execution_engine
      - prover
      - proposer

  taiko_client_prover_relayer:
    image: nethsurge/taiko-client:f042ca8
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    networks:
      - surge
    ports:
      - "${PORT_PROVER_SERVER}:9876"
    entrypoint:
      - taiko-client
    command:
      - prover
      - --l1.ws=${L1_ENDPOINT_WS}
      - --l2.ws=ws://execution-taiko-l2-client:8548
      - --l2.http=http://execution-taiko-l2-client:8547
      - --taikoL1=${TAIKO_L1_ADDRESS}
      - --taikoL2=${TAIKO_L2_ADDRESS}
      # use the same private key as the proposer
      - --l1.proverPrivKey=${L1_PROPOSER_PRIVATE_KEY}
      - --prover.capacity=${PROVER_CAPACITY}
      - --raiko.host=${SGX_RAIKO_HOST}
      # - --tx.notInMempoolTimeout=30s
      # - --tx.resubmissionTimeout=10s
      # - --raiko.requestTimeout=${RAIKO_REQUEST_TIMEOUT}
      # conditioned
      # - --proverSet ${PROVER_SET}
      # - --prover.allowance ${TOKEN_ALLOWANCE}
      # - --prover.minEthBalance ${MIN_ETH_BALANCE}
      # - --prover.minTaikoTokenBalance ${MIN_TAIKO_BALANCE}
      # - --prover.proveUnassignedBlocks
      # - --tx.feeLimitMultiplier ${TX_FEE_LIMIT_MULTIPLIER}
      # - --tx.feeLimitThreshold ${TX_FEE_LIMIT_THRESHOLD}
      # - --tx.gasLimit ${TX_GAS_LIMIT}
      # - --tx.minBaseFee ${TX_MIN_BASEFEE}
      # - --tx.minTipCap ${TX_MIN_TIP_CAP}
      # - --tx.notInMempoolTimeout ${TX_NOT_IN_MEMPOOL}
      # - --tx.numConfirmations ${TX_NUM_CONFIRMATIONS}
      # - --tx.receiptQueryInterval ${TX_RECEIPT_QUERY}
      # - --tx.resubmissionTimeout ${TX_RESUBMISSION}
      # - --tx.safeAbortNonceTooLowCount ${TX_SAFE_ABORT_NONCE_TOO_LOW}
      # - --tx.sendTimeout ${TX_SEND_TIMEOUT}
    profiles:
      - prover

  taiko_client_proposer:
    image: nethsurge/taiko-client:f042ca8
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    volumes:
      - ./execution-data-taiko:/data/taiko-geth
      - ./jwtsecret:/tmp/jwt/jwtsecret
    networks:
      - surge
    entrypoint:
      - taiko-client
    command:
      - proposer
      - --l1.ws=${L1_ENDPOINT_WS}
      - --l2.http=http://execution-taiko-l2-client:8547
      - --l2.auth=http://execution-taiko-l2-client:8552
      - --taikoL1=${TAIKO_L1_ADDRESS}
      - --taikoL2=${TAIKO_L2_ADDRESS}
      - --jwtSecret=/tmp/jwt/jwtsecret
      - --l1.proposerPrivKey=${L1_PROPOSER_PRIVATE_KEY}
      - --l2.suggestedFeeRecipient=${L2_SUGGESTED_FEE_RECIPIENT}
      # - --tx.notInMempoolTimeout=30s
      # - --tx.resubmissionTimeout=10s
      - --epoch.interval=5s
      # - --surge.gasNeededForProposingBlock=165000
      # - --surge.gasNeededForProvingBlock=100000
      # - --surge.offChainCosts=50000000000000
      # - --surge.priceFluctuationModifier=15
      # - --verbosity=4
      # conditioned
      # - --epoch.minTip ${EPOCH_MIN_TIP}
      # - --proverSet ${PROVER_SET}
      # - --txPool.localsOnly
      # - --txPool.locals ${TXPOOL_LOCALS}
      # - --l1.blobAllowed
      # - --tx.feeLimitMultiplier ${TX_FEE_LIMIT_MULTIPLIER}
      # - --tx.feeLimitThreshold ${TX_FEE_LIMIT_THRESHOLD}
      # - --tx.gasLimit ${TX_GAS_LIMIT}
      # - --tx.minBaseFee ${TX_MIN_BASEFEE}
      # - --tx.minTipCap ${TX_MIN_TIP_CAP}
      # - --tx.notInMempoolTimeout ${TX_NOT_IN_MEMPOOL}
      # - --tx.numConfirmations ${TX_NUM_CONFIRMATIONS}
      # - --tx.receiptQueryInterval ${TX_RECEIPT_QUERY}
      # - --tx.resubmissionTimeout ${TX_RESUBMISSION}
      # - --tx.safeAbortNonceTooLowCount ${TX_SAFE_ABORT_NONCE_TOO_LOW}
      # - --tx.sendTimeout ${TX_SEND_TIMEOUT}
    profiles:
      - proposer

  taiko-blockscout-postgres:
    image: postgres:alpine
    container_name: taiko-blockscout-postgres
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    volumes:
      - ./blockscout-postgres-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: blockscout
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: MyPassword1!
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      GOSU_VERSION: 1.17
      PG_MAJOR: 17
      PG_VERSION: 17.0
      PG_SHA256: 7e276131c0fdd6b62588dbad9b3bb24b8c3498d5009328dba59af16e819109de
      DOCKER_PG_LLVM_DEPS: llvm15-dev \t\tclang15
      PGDATA: /var/lib/postgresql/data
    command:
      - "-c"
      - "max_connections=1000"
    networks:
      - surge
    profiles:
      - blockscout

  taiko-blockscout-verif:
    image: ghcr.io/blockscout/smart-contract-verifier:v1.6.0
    container_name: taiko-blockscout-verif
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    ports:
      - 8050:8050
    environment:
      SMART_CONTRACT_VERIFIER__SERVER__HTTP__ADDR: 0.0.0.0:8050
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      APP_USER: app
      SMART_CONTRACT_VERIFIER__SOLIDITY__ENABLED: true
      SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL: https://solc-bin.ethereum.org/linux-amd64/list.json
    command:
      - "./smart-contract-verifier-server"
    networks:
      - surge
    profiles:
      - blockscout

  taiko-blockscout:
    image: blockscout/blockscout:6.6.0
    container_name: taiko-blockscout
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    ports:
      - 4000:4000
    environment:
      DATABASE_URL: postgresql://postgres:MyPassword1!@taiko-blockscout-postgres:5432/blockscout
      API_V2_ENABLED: true
      ETHEREUM_JSONRPC_VARIANT: nethermind
      MICROSERVICE_SC_VERIFIER_URL: http://taiko-blockscout-verif:8050/api
      ETHEREUM_JSONRPC_HTTP_URL: http://execution-taiko-l2-client:8547/
      INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: true
      SUBNETWORK: Kurtosis
      ETHEREUM_JSONRPC_TRACE_URL: http://execution-taiko-l2-client:8547/
      COIN: ETH
      MICROSERVICE_SC_VERIFIER_TYPE: sc_verifier
      PORT: 4000
      MICROSERVICE_SC_VERIFIER_ENABLED: true
      ECTO_USE_SSL: false
      SECRET_KEY_BASE: 56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN
      CHAIN_ID: 763374
      SHOW_TESTNET_LABEL: true
      DISABLE_EXCHANGE_RATES: true
      DISABLE_KNOWN_TOKENS: true
      INDEXER_INTERNAL_TRANSACTIONS_BATCH_SIZE: 10000
      INDEXER_HIDE_INDEXING_PROGRESS_ALERT: false
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      RELEASE_VERSION: 6.6.0
      CHAIN_TYPE:
      BRIDGED_TOKENS_ENABLED:
      BLOCKSCOUT_VERSION: v6.6.0-beta
      SMART_CONTRACT_VERIFIER__SOLIDITY__ENABLED: true
      SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL: https://solc-bin.ethereum.org/linux-amd64/list.json
    command:
      - "/bin/sh"
      - "-c"
      - "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    networks:
      - surge
    profiles:
      - blockscout

volumes:
  prometheus_data:
  grafana_data:
  l2_execution_engine_data:

networks:
  surge:
    name: surge-network